#!/usr/bin/env node

const Path = require('path');

const DOC_LIST = [
  "divisions",
  "points",
  "faq_ratings",
  "ratings",
  "sec5",
  "reclassification",
  "sec8",
  "classifications",
  "non_standard_rules",
  "true_amateur",
  "playerpack"
];
const external = /^http/i;
const DOC_SRC = 'libraries';
const DST = './src/app/'
const fs = require('fs');
const md = require('markdown-it')({replaceLink: replaceLink})
//.use(require('markdown-it-container'), 'app-table')
.use(replaceLinkPlugIn);

createComponents(DOC_LIST, DOC_SRC);

//////////////////////////////////////////////////////////////////////
// end of program
//////////////////////////////////////////////////////////////////////

function createComponents(sources, srcPath) {
  sources.forEach(id => {
    const filepath = Path.join(srcPath, id + '.md');
    const mdContent = fs.readFileSync(filepath, 'utf8');
    const htmlContent = md.render(mdContent);

    makeHtml(id, htmlContent, srcPath);
    makeComponent(id, srcPath);
  });
}

function makeHtml(id, html, srcPath) {
  const name = srcPath;
  const dstPath = Path.join(DST, srcPath, id + '.html');
  let content =`<div class="app-${name}" id="app-${id}">`;
  content += `
${html}</div>`;
  fs.writeFileSync(dstPath, content);
}

function makeComponent(id, srcPath) {
  const name = srcPath;
  const Name = capitalizeFirstLetter(name);
  const sid = makeId(id);
  const dstPath = Path.join(DST, srcPath, name + id + '.component.ts');
  const content =`import { Component } from '@angular/core';
import { ${Name}Component } from './${name}.component';
@Component({
  selector: 'app-${name}-${id}',
  templateUrl: './${id}.html'
})
export class ${Name}${sid}Component extends ${Name}Component {
}
`;
  fs.writeFileSync(dstPath, content);
}

//
// @ see https://github.com/martinheidegger/markdown-it-replace-link
//
function replaceLinkPlugIn(md) {
  md.core.ruler.after(
    'inline',
    'replace-link',
    state => {
      const replace = md.options.replaceLink;
      if (typeof replace === 'function') {
        state.tokens.forEach(blockToken => {
          if (blockToken.type === 'inline' && blockToken.children) {
            blockToken.children.forEach(token => {
              const type = token.type;
              if (type === 'link_open') {
                replaceAttr(token, 'href', replace, state.env);
              } else if (type === 'image') {
                replaceAttr(token, 'src', replace, state.env);
              }
            });
          }
        });
      }
      return false;
    }
  );
};

function replaceAttr(token, attrName, replace, env) {
  token.attrs.forEach(attr => {
    if (attr[0] === attrName) {
      if (attr[0] === 'href' && !external.test(attr[1]) ) {
        attr[0] = 'routerLink'; // replace href with routerLink
        attr[1] = replace(attr[1], env, token);
      }
    }
  });
}

function replaceLink(link, env) {
  const pattern = /(\w*)+\#(\w+)/;
  const result = link.match(pattern);
  if (result != null) {
    return '/' + result[1];
  } else {
    return '/' + link;
  }
}

//
//  @see https://github.com/markdown-it/markdown-it-footnote/blob/master/index.js
//
function render_footnote_ref(tokens, idx, options, env, slf) {
  const id      = slf.rules.footnote_anchor_name(tokens, idx, options, env, slf);
  const caption = slf.rules.footnote_caption(tokens, idx, options, env, slf);
  let refid = id;
  if (tokens[idx].meta.subId > 0) {
    refid += ':' + tokens[idx].meta.subId;
  }

  return '<sup class="footnote-ref"><a routerLink="." fragment="fn' + id + '" id="fnref' + refid + '">' + caption + '</a></sup>';
}

function makeId(string) {
  const id = string.replace(/\-/g, '');
  return capitalizeFirstLetter(id);
}

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
